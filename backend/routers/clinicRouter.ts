import express from "express";
import { getClinicData } from "../controller/getClinicData";
import { createClinicData } from "../controller/createClinicData";
import { updateClinicData } from "../controller/updateClinicData";
import { deleteClinicData } from "../controller/deleteClinicData";
import { authMiddleware } from "../auth/authMiddleware";
const clinicRouter = express.Router();
clinicRouter.all("*", authMiddleware);

/**
 * @swagger
 * components:
 *   schemas:
 *     Pets:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *           description: The auto generated id of the pet
 *         name:
 *           type: string
 *           description: The name of the pet
 *         gender:
 *           type: string
 *           description: The gender(male or female) of the pet
 *         dob:
 *           type: string
 *           description: The date of birth of the pet
 *         breedId:
 *           type: integer
 *           description: The Breed ID of the pet
 *           $ref: '#components/schemas/Breeds/properties/id'
 *         statusId:
 *           type: integer
 *           description: The status Id of the pet
 *         parentsId:
 *           type: integer
 *           description: The parent Id of the pet
 *         createdAt:
 *           type: string
 *           description: Created date of the pet
 *         updatedAt:
 *           type: string
 *           description: Updated date of the pet
 *         breed:
 *           $ref: '#components/schemas/Breeds'
 *         status:
 *           $ref: '#components/schemas/Status'
 *         parent:
 *           $ref: '#components/schemas/Parents'
 *
 *     Breeds:
 *         type: object
 *         properties:
 *             id:
 *              type: integer
 *              description: The auto generated id of the Breeds
 *             name:
 *               type: string
 *               description: Breed Name (eg. Bull Dog, Terria)
 *             createdAt:
 *                type: string
 *                description: Created date of the breed name
 *             updatedAt:
 *                type: string
 *                description: Updated date of the breed name
 *
 *     Status:
 *         type: object
 *         properties:
 *              id:
 *               type: integer
 *               description: The auto generated id of the Status
 *              status_type:
 *               type: string
 *               description: The type of the status (eg. normal sickness, Covid 19)
 *              createdAt:
 *                type: string
 *                description: Created date of the status_type
 *              updatedAt:
 *                type: string
 *                description: Updated date of the status_type
 *     Cities:
 *          type: object
 *          properties:
 *                id:
 *                 type: integer
 *                 description: The auto generated id of the Cities
 *                name:
 *                 type: string
 *                 description: Name of the Cities
 *                createdAt:
 *                 type: string
 *                 description: Created date of the cities
 *                updatedAt:
 *                 type: string
 *                 description: Updated date of the cities
 *     Townships:
 *         type: object
 *         properties:
 *               id:
 *                type: integer
 *                description: The auto generated id of the townships
 *               name:
 *                 type: string
 *                 description: Name of the townships
 *               createdAt:
 *                 type: string
 *                 description: Created date of the townships
 *               updatedAt:
 *                 type: string
 *                 description: Updated date of the townships
 *     Parents:
 *        type: object
 *        properties:
 *            id:
 *             type: integer
 *             description: The autogenerated id of the parents
 *            name:
 *              type: string
 *              description: The name of the parents
 *            phone_number:
 *              type: integer
 *              description: Phone number of the parents
 *            address:
 *              type: string
 *              description: Address of the parents
 *            citiesId:
 *              type: integer
 *              description: Related city id of the parent
 *            townshipsId:
 *              type: integer
 *              description: Related township id of the parent
 *            createdAt:
 *              type: string
 *              description: Created date of the parents
 *            updatedAt:
 *              type: string
 *              description: Updated date of the parents
 *            township:
 *               $ref: '#components/schemas/Townships'
 *            city:
 *               $ref: '#components/schemas/Cities'
 *
 *     Pet:
 *       type: object
 *       description: Schema to created a new clinic data
 *       properties:
 *            petName:
 *                 type: string
 *                 description: The name of the new pet
 *            gender:
 *                 type: string
 *                 description: The gender of the new pet (eg. male or female)
 *            status:
 *                 type: integer
 *                 description: The status of the new pet (eg. normal sickness or covid 19)
 *            breed:
 *                 type: integer
 *                 description: The breed of the new pet (eg.bull dog or terria )
 *            dateOfBirth:
 *                 type: string
 *                 description: The date of birth of the new pet
 *            parentName:
 *                 type: string
 *                 description: The parent name of the new pet
 *            phoneNumber:
 *                 type: integer
 *                 description: The phone number of the new pet's parent
 *            address:
 *                 type: string
 *                 description: The address of the new pet's parent
 *            city:
 *                 type: integer
 *                 description: The city of the new pet's parent
 *            township:
 *                 type: integer
 *                 description: The township of the new pet's parent
 */

/**
 * @swagger
 * tags:
 *    name: Clinic
 *    description: Clinic Managing API
 */

/**
 * @swagger
 * /:
 *    security:
 *       - bearerAuth: []
 *    get:
 *       summary: Returns all the information about the pets
 *       tags: [Clinic]
 *       responses:
 *          200:
 *            description: to get all available pets's data
 *            content:
 *              application/json:
 *                  schema:
 *                    type: array
 *                    items:
 *                       $ref: '#/components/schemas/Pets'
 */
clinicRouter.get("/", getClinicData);

/**
 * @swagger
 * /:
 *      security:
 *       - bearerAuth: []
 *      post:
 *          summary: Created a new Clinic Data
 *          tags: [Clinic]
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/schemas/Pet'
 *
 *          responses:
 *              200:
 *                description: the new pet that needs to be created to the medical records
 *                content:
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/schemas/Pet'
 */
clinicRouter.post("/", createClinicData);

/**
 * @swagger
 * /{petId}:
 *
 *     security:
 *       - bearerAuth: []
 *     put:
 *       summary: Update a new Pet's Data
 *       tags: [Clinic]
 *       parameters:
 *            - name: petId
 *              in: path
 *              required: true
 *              schema:
 *                  type: string
 *                  required: true
 *                  description: the pet Id
 *       requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/Pet'
 *       responses:
 *          200:
 *             description: The pet's data was successfully updated
 *             content:
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/schemas/Pet'
 *          404:
 *             description: The pet was not found
 *          500:
 *             description: Internal server error
 */

clinicRouter.put("/:petId", updateClinicData);

/**
 * @swagger
 *  /{petId}:
 *
 *      security:
 *       - bearerAuth: []
 *      delete:
 *          summary: Remove the pet by petId
 *          tags: [Clinic]
 *          parameters:
 *              - name: petId
 *                in: path
 *                schema:
 *                  type: string
 *                  required: true
 */

clinicRouter.delete("/:petId", deleteClinicData);

export default clinicRouter;
